/*Track Data Changes
отслеживание изменений в БД (в таблице)
*/


-----------------------------------------------------------------------------------------------------------------------------------------------------------

/*rowversion/timestamp data type
поле с этим типом данных отражает изменение в строке, т.е. это поле меняется если строка была изменена (update)
это поле уникально в рамках всей БД (???)
только 1 на таблицу. Duplicate rowversion values can be generated by using the SELECT INTO statement in which a rowversion column is in the SELECT list. 
We do not recommend using rowversion in this manner.

timestamp is the synonym for the rowversion data type. use rowversion instead of timestamp wherever possible
To return the current rowversion value for a database, use @@DBTS.
MIN_ACTIVE_ROWVERSION() returns the lowest active rowversion value in the current database
MIN_ACTIVE_ROWVERSION() = @@DBTS + 1
*/
--создание
drop table if exists tbl1, tbl2;
CREATE TABLE tbl1 (id int, timestamp); --автоматическая генерация имени 'timestamp' для столбца
CREATE TABLE tbl2 (id int, VerCol rowversion); --нужно явно указать имя столбца
select * from tbl1;
select * from tbl2;

--вставка данных
select @@DBTS, MIN_ACTIVE_ROWVERSION()
select * from tbl2;
insert into tbl2(id) values (1), (2), (3);
select @@DBTS, MIN_ACTIVE_ROWVERSION()
select * from tbl2;

select @@DBTS, MIN_ACTIVE_ROWVERSION()
select * from tbl2;
insert into tbl2(id) values (4);
select @@DBTS, MIN_ACTIVE_ROWVERSION()
select * from tbl2;

--обновление
select @@DBTS, MIN_ACTIVE_ROWVERSION()
select * from tbl2;
update tbl2 set id = 2 where id = 2;
select @@DBTS, MIN_ACTIVE_ROWVERSION()
select * from tbl2;

select @@DBTS, MIN_ACTIVE_ROWVERSION()
select * from tbl2;
update tbl2 set id = 2 where id = 4;
select @@DBTS, MIN_ACTIVE_ROWVERSION()
select * from tbl2;


--удаление
select @@DBTS, MIN_ACTIVE_ROWVERSION()
select * from tbl2;
delete tbl2 where id = 2;
select @@DBTS, MIN_ACTIVE_ROWVERSION()
select * from tbl2;



-----------------------------------------------------------------------------------------------------------------------------------------------------------

/*Temporal Tables (см. 23.5. Temporal Tables)
system-versioned temporal tables позволяют отслеживать изменения в таблице во времени,
т.е. хранят историчекую информацию для строк, можно посмотреть какая информация была в таблице (срез) в любой момент времени
должна содержать 2 поля с типом datetime2, эти поля используются системой для отражения "периода актуальности" строки 
	даты в формате UTC time zone (!!!)
	ValidTo = 9999-12-31 23:59:59.99 означает, что строка актуальна
есть ссылка на history table, в которой хранятся предыдущие версии строк (history table - старые версии строк, temporal table - актуальные версии строк
	имя для history table можноне указывать явно, тогда имя будет присвоено автоматически 
*/



-----------------------------------------------------------------------------------------------------------------------------------------------------------

/*Change Tracking 
часто используется для внешних приложений для отслеживания узменения данных
Change tracking captures the fact that rows in a table were changed, but does not capture the data that was changed. 
A synchronous tracking mechanism is used to track the changes. 
This has been designed to have minimal overhead to the DML operations.

Лучше всего использовать snapshot isolation (snapshot isolation be set to ON for the database)

can be used for One-Way Synchronization Applications or Two-Way Synchronization Applications

change tracking must first be enabled for the database and then enabled for the tables that you want to track within that database
Each table that is enabled for Change Tracking has an internal on-disk table which is used by Change Tracking functions to determine 
	the change version and the rows that have changed since a particular version
To query for the rows that have changed and to obtain information about the changes, you can use change tracking functions
*/

--включенный Change Tracking на БД
select * from sys.change_tracking_databases
--включенный Change Tracking на таблицах
select * from sys.change_tracking_tables

/*enable Change Tracking for DB*/
use <db_nm>
ALTER DATABASE AdventureWorks2012 SET CHANGE_TRACKING = ON  
	(CHANGE_RETENTION = 2 DAYS --время хранения изменений, все что старше удаляется (зависит от периодичности синхранизацииприложения и БД)
	, AUTO_CLEANUP = ON) --автоудаление истории изменений стрше чем CHANGE_RETENTION

			--disable Change Tracking for DB
			--перед этим нужно проверить, что для таблиц не включен Change Tracking
			ALTER DATABASE AdventureWorks2012 SET CHANGE_TRACKING = OFF  

select * from sys.change_tracking_databases

/*enable Change Tracking for table*/
ALTER TABLE Person.Contact ENABLE CHANGE_TRACKING  
	WITH (TRACK_COLUMNS_UPDATED = ON)  --хранение доп информации при операции обновления строки

select * from sys.change_tracking_tables
			
			--disable Change Tracking for table
			ALTER TABLE Person.Contact  DISABLE CHANGE_TRACKING;

--сколько места занимают системные таблицы при работе Change Tracking
sp_spaceused 'sys.change_tracking_309576141'  
sp_spaceused 'sys.syscommittab' 

-----------------------------------------------------------------------------------------------------------------------------------------------------------

/*Change Data Capture (CDC)
часто используется для внешних приложений для отслеживания узменения данных
The tracking mechanism in change data capture involves an asynchronous capture of changes from the transaction log 
so that changes are available after the DML operation.
Change data capture provides historical change information for a user table by capturing both the fact that DML changes were made 
and the actual data that was changed.
Column information and the metadata that is required to apply the changes to a target environment is captured for the modified rows 
and stored in change tables (!!!) that mirror the column structure of the tracked source tables.
CDC often is used for ETL-process (An ETL application incrementally loads change data from SQL Server source tables to a data warehouse or data mart)

A database cannot be enabled for both Change Data Capture (CDC) and have memory-optimized tables at the same time. (< SQL Server 2017)

OLTP process -> DML statement -> transaction log -> Capture process -> Change tables -> CDC query functions -> ETL-process -> Data warehouse	

INSERT: 1 row in change table
UPDATE: 2 rows in change table
DELETE: 1 row in change table
*/


/*enable CDC for DB*/
--создается схема cdc (содержит change tables, CDC query functions), пользователь cdc, metadata tables, jobs
use <db_nm>
exec sys.sp_cdc_enable_db
			
			--disable CDC for DB
			--removing all CDC metadata: cdc user and schema and jobs. 
			--если есть gating roles еенужно удалить вручную
			exec sys.sp_cdc_disable_db


/*enable CDC for table*/
-- is_tracked_by_cdc = 1 from sys.tables catalog view
exec sys.sp_cdc_enable_table  
	@source_schema = N'dbo'
	, @source_name   = N't1' 
	, @role_name     = NULL --имя роли для контроля процесса CDC (если не NULL, то создается), если не нужно то задать явно @role_name = NULL
	--@filegroup_name = N'MyDB_CT',  
	--@supports_net_changes = 1  --см. MSDN

			--disable CDC for table
			EXEC sys.sp_cdc_disable_table  
				@source_schema = N'dbo' 
				, @source_name   = N't1'
				, @capture_instance = N'dbo_MyTable' 


select * from sys.objects where schema_id =SCHEMA_ID('cdc')
 and type not in ('PK')

select * from cdc.dbo_t1_CT
insert into dbo.t1 values ('d')
update dbo.t1 set val = 'h' where id = 4
select * from cdc.dbo_t1_CT

/*get metadata of tables*/
sys.sp_cdc_help_change_data_capture





